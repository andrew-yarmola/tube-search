
inline double re_center(const AJCC& z) {
  return z.f.re;
}

inline const AJCC operator-(const AJCC&x) {

	return AJCC(-x.f, -x.z0, -x.z1, -x.w0, -x.w1, x.e);

}

inline const AJCC conj(const AJCC&x) {

	return AJCC(conj(x.f), conj(x.w0), conj(x.w1), conj(x.z0), conj(x.z1), x.e);

}

inline const AJCC re(const AJCC&x) {

	return (x + conj(x)) * 0.5;

}

inline const AJCC im(const AJCC&x) {

	return ((x - conj(x)) * eye(AJCC())) * 0.5;

}

inline const AJCC abs_sqrd(const AJCC& x) {

  return x * conj(x);

}

inline const AJCC abs(const AJCC& x) {

  return sqrt(abs_sqrd(x));

}

inline const AJCC operator+(const AJCC&x,const AJCC&y) {

	AComplex r_f = x.f+y.f;
	AComplex r_z0 = x.z0+y.z0;
	AComplex r_z1 = x.z1+y.z1;
	AComplex r_w0 = x.w0+y.w0;
	AComplex r_w1 = x.w1+y.w1;
	// See Lemma 7.1 of GMT
	double r_error = (1+3*EPS)*
						 ((x.e + (r_z0.e + r_w0.e)) +
						  ((y.e + (r_z1.e + r_w1.e)) + r_f.e));
  return AJCC(r_f.z, r_z0.z, r_z1.z, r_w0.z, r_w1.z, r_error);

}

inline const AJCC operator-(const AJCC&x,const AJCC&y) {

	AComplex r_f = x.f-y.f;
	AComplex r_z0 = x.z0-y.z0;
	AComplex r_z1 = x.z1-y.z1;
	AComplex r_w0 = x.w0-y.w0;
	AComplex r_w1 = x.w1-y.w1;
	// See Lemma 7.1 of GMT
	double r_error = (1+3*EPS)*
						 ((x.e + (r_z0.e + r_w0.e)) +
						  ((y.e + (r_z1.e + r_w1.e)) + r_f.e));
  return AJCC(r_f.z, r_z0.z, r_z1.z, r_w0.z, r_w1.z, r_error);

}
inline const AJCC operator+(const AJCC&x,double y) {

	AComplex r_f = x.f+y;
	return AJCC(r_f.z, x.z0, x.z1, x.w0, x.w1,
			  (1+EPS)*(x.e + r_f.e));

}

inline const AJCC operator-(const AJCC&x,double y) {

	AComplex r_f = x.f-y;
	return AJCC(r_f.z, x.z0, x.z1, x.w0, x.w1,
			  (1+EPS)*(x.e + r_f.e));

}

inline const AJCC operator*(const AJCC&x,double y) {

	AComplex r_f = x.f*y;
	AComplex r_z0 = x.z0*y;
	AComplex r_z1 = x.z1*y;
	AComplex r_w0 = x.w0*y;
	AComplex r_w1 = x.w1*y;
	double r_error = (1+3*EPS)*(
                  r_f.e + (((x.e*fabs(y))   + (r_z0.e+r_w0.e))+
						               (r_z1.e+r_w1.e)));
  return AJCC(r_f.z, r_z0.z, r_z1.z, r_w0.z, r_w1.z, r_error);

}

inline const AJCC operator/(const AJCC&x,double y) {

	AComplex r_f = x.f/y;
	AComplex r_z0 = x.z0/y;
	AComplex r_z1 = x.z1/y;
	AComplex r_w0 = x.w0/y;
	AComplex r_w1 = x.w1/y;
	double r_error = (1+3*EPS)*(
                  r_f.e  +  (((x.e/fabs(y)) + (r_z0.e + r_w0.e)) +
						               (r_z1.e + r_w1.e)));
	return AJCC(r_f.z, r_z0.z, r_z1.z, r_w0.z, r_w1.z, r_error);

}

inline const double absUB(const AJCC&x) {

	return (1+2*EPS)*(absUB(x.f)+(size(x)+x.e));

}

inline const double absLB(const AJCC&x) {

	double v = (1-EPS) * (absLB(x.f)-(1 + EPS) * (size(x) + x.e));
	return (v > 0) ? v : 0;

}

inline const double size(const AJCC&x) {
	return x.size;
}
